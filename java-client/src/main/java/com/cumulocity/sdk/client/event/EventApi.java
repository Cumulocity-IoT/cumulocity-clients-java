/*
 * Copyright (C) 2013 Cumulocity GmbH
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.cumulocity.sdk.client.event;

import com.cumulocity.model.idtype.GId;
import com.cumulocity.rest.representation.event.EventRepresentation;
import com.cumulocity.sdk.client.SDKException;
import com.cumulocity.sdk.client.buffering.Future;

/**
 * API for creating, deleting and retrieving events from the platform.
 * All creating methods modifies the source object, including only the ID value, ignoring the rest.
 */
public interface EventApi {

    /**
     * Gets event by id
     *
     * @param gid id of the event to search for
     * @return the event with the given id
     * @throws SDKException if the event is not found or if the query failed
     */
    EventRepresentation getEvent(GId gid) throws SDKException;

    /**
     * Creates event in the platform. The id of the event must not be set, since it will be generated by the platform
     *
     * @param event event to be created
     * @return the created event with the generated id
     * @throws SDKException if the event could not be created
     */
    EventRepresentation create(EventRepresentation event) throws SDKException;

    /**
     * Creates event in the platform. Immediate response is available through the Future object.
     * In case of lost connection, buffers data in persistence provider.
     *
      * @param event event to be created
     * @return the created event with the generated id
     * @throws SDKException if the event could not be created
     */
    Future createAsync(EventRepresentation event) throws SDKException;

    /**
     * Deletes event from the platform.
     * The event to be deleted is identified by the id within the given event.
     *
     * @param event to be deleted
     * @throws SDKException if the event could not be deleted
     */
    void delete(EventRepresentation event) throws SDKException;

    /**
     * Deletes events from the platform based on the specified filter
     *
     * @param filter the filter criteria(s)
     * @throws IllegalArgumentException when null event filter provided
     * @throws SDKException if the event(s) could not be deleted
     */
    void deleteEventsByFilter(EventFilter filter) throws IllegalArgumentException, SDKException;

    /**
     * Gets the all the event in the platform
     *
     * @return collection of events with paging functionality
     * @throws SDKException if the query failed
     */
    EventCollection getEvents() throws SDKException;

    /**
     * Gets the events from the platform based on specified filter
     *
     * @param filter the filter criteria(s)
     * @return collection of events matched by the filter with paging functionality
     * @throws SDKException if the query failed
     */
    EventCollection getEventsByFilter(EventFilter filter) throws SDKException;

    /**
     * This update the event in the platform. Cannot update the ID.
     *
     * @param eventRepresentation event to be updated
     * @return The created event
     * @throws SDKException if the event could not be updated
     */
    EventRepresentation update(EventRepresentation eventRepresentation) throws SDKException;
}
