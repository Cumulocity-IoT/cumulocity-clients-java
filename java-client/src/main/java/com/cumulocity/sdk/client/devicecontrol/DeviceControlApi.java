/*
 * Copyright (C) 2013 Cumulocity GmbH
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.cumulocity.sdk.client.devicecontrol;

import com.cumulocity.model.idtype.GId;
import com.cumulocity.rest.representation.operation.OperationRepresentation;
import com.cumulocity.sdk.client.SDKException;
import com.cumulocity.sdk.client.buffering.Future;
import com.cumulocity.sdk.client.notification.Subscriber;

/**
 * API for creating, updating and retrieving operations from the platform.
 */
public interface DeviceControlApi {

    /**
     * Gets operation by id
     *
     * @param gid id of the operation to search for
     * @return the operation with the given id
     * @throws SDKException if the operation is not found or if the query failed
     */
    OperationRepresentation getOperation(GId gid) throws SDKException;

    /**
     * Creates operation in the platform. The id of the operation must not be set, since it will be generated by the platform
     *
     * @param operation operation to be created
     * @return the created operation with the generated id
     * @throws SDKException if the operation could not be created
     */
    OperationRepresentation create(OperationRepresentation operation) throws SDKException;

    /**
     * Updates operation in the platform.
     * The operation to be updated is identified by the id within the given operation.
     *
     * @param operation to be updated
     * @return the updated operation
     * @throws SDKException if the operation could not be updated
     */
    OperationRepresentation update(OperationRepresentation operation) throws SDKException;

    /**
     * Updates operation in the platform. Immediate response is available through the Future object.
     * In case of lost connection, buffers data in persistence provider.
     *
     * @param operation to be updated
     * @return the updated operation
     * @throws SDKException if the operation could not be updated
     */
    Future updateAsync(OperationRepresentation operation) throws SDKException;

    /**
     * Gets the all the operation in the platform
     *
     * @return collection of operations with paging functionality
     * @throws SDKException if the query failed
     */
    OperationCollection getOperations() throws SDKException;

    /**
     * Gets the operations from the platform based on specified filter. Queries based on [{@code status}, {@code deviceId}, {@code agentId}]
     * and [{@code deviceId}, {@code agentId}] are not supported.
     * currently not supported.
     *
     * @param filter the filter criteria(s)
     * @return collection of operations matched by the filter with paging functionality
     * @throws SDKException             if the query failed
     * @throws IllegalArgumentException in case of queries based on [{@code status}, {@code deviceId}, {@code agentId}] or [{@code
     *                                  deviceId}, {@code agentId}]
     */
    OperationCollection getOperationsByFilter(OperationFilter filter) throws SDKException;

    /**
     * Gets the notifications subscriber, which allows to receive newly created operations for agent.
     * <pre>
     * <code>
     * Example:
     *
     *  final GId agentId = ...
     *  Subscriber&lt;GId, OperationRepresentation&gt; subscriber = deviceControlApi.getNotificationsSubscriber();
     *
     *  subscriber.subscribe( agentId , new SubscriptionListener&lt;GId, OperationRepresentation&gt;() {
     *
     *      {@literal @}Override
     *      public void onNotification(Subscription&lt;GId&gt; subscription, OperationRepresentation operation) {
     *             //process operation
     *      }
     *
     *      {@literal @}Override
     *      public void onError(Subscription&lt;GId&gt; subscription, Throwable ex) {
     *          // handle subscribe operation error
     *      }
     *  });
     *  </code>
     *  </pre>
     *
     * @return subscriber
     * @throws SDKException when subscriber creation fail
     */
    Subscriber<GId, OperationRepresentation> getNotificationsSubscriber() throws SDKException;
}
