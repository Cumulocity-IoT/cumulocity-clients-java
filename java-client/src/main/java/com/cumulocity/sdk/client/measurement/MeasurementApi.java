/*
 * Copyright (C) 2013 Cumulocity GmbH
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of 
 * this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.cumulocity.sdk.client.measurement;

import com.cumulocity.model.cep.ProcessingMode;
import com.cumulocity.model.idtype.GId;
import com.cumulocity.rest.representation.measurement.MeasurementCollectionRepresentation;
import com.cumulocity.rest.representation.measurement.MeasurementRepresentation;
import com.cumulocity.sdk.client.SDKException;
import com.cumulocity.sdk.client.buffering.Future;

/**
 * API for creating, deleting and retrieving measurements from the platform.
 */
public interface MeasurementApi {

    /**
     * Gets measurement by id
     *
     * @param gid id of the measurement to search for
     * @return the measurement with the given id
     * @throws SDKException if the measurement is not found or if the query failed
     */
    MeasurementRepresentation getMeasurement(GId gid) throws SDKException;

    /**
     * Creates measurement in the platform. The id of the measurement must not be set, since it will be generated by the platform
     *
     * @param measurement measurement to be created
     * @return the created measurement with the generated id
     * @throws SDKException if the measurement could not be created
     */
    MeasurementRepresentation create(MeasurementRepresentation measurement) throws SDKException;

    /**
     * Creates measurement in the platform. Does not send Accept header to make the request be processed faster.
     *
     * @param measurement measurement to be created
     * @throws SDKException if the measurement could not be created
     */
    void createWithoutResponse(MeasurementRepresentation measurement) throws SDKException;

    /**
     * Creates measurements in the platform. The id of the measurements must not be set, since it will be generated by the platform
     *
     * @param measurementCollection measurements to be created
     * @return the created measurements with their generated ids
     * @throws SDKException if the measurements could not be created
     */
    MeasurementCollectionRepresentation createBulk(MeasurementCollectionRepresentation measurementCollection) throws SDKException;

    /**
     * Creates measurements in the platform. Does not send Accept header to make the request be processed faster.
     *
     * @param measurementCollection measurements to be created
     * @throws SDKException if the measurements could not be created
     */
    void createBulkWithoutResponse(MeasurementCollectionRepresentation measurementCollection) throws SDKException;

    /**
     * Creates measurement in the platform. Immediate response is available through the Future object. 
     * In case of lost connection, buffers data in persistence provider. 
     *
     * @param measurement measurement to be created
     * @return the created measurement with the generated id
     * @throws SDKException if the measurement could not be created
     */
    Future createAsync(MeasurementRepresentation measurement) throws SDKException;

    /**
     * Deletes measurement from the platform.
     * The measurement to be deleted is identified by the id within the given measurement.
     *
     * @param measurement to be deleted
     * @throws SDKException if the measurement could not be deleted
     */
    void delete(MeasurementRepresentation measurement) throws SDKException;

    /**
     * Delete measurements from the platform based on the specified filter
     *
     * @param filter the filter criteria(s)
     * @throws IllegalArgumentException
     * @throws SDKException if the query failed
     */
    void deleteMeasurementsByFilter(MeasurementFilter filter) throws IllegalArgumentException, SDKException;

    /**
     * Gets the all the measurement in the platform
     *
     * @return collection of measurements with paging functionality
     * @throws SDKException if the query failed
     */
    MeasurementCollection getMeasurements() throws SDKException;

    /**
     * Gets the measurements from the platform based on specified filter
     *
     * @param filter the filter criteria(s)
     * @return collection of measurements matched by the filter with paging functionality
     * @throws SDKException if the query failed
     */
    MeasurementCollection getMeasurementsByFilter(MeasurementFilter filter) throws SDKException;
    
    /**
     * Deletes measurement from the platform.
     * The measurement to be deleted is identified by the id within the given measurement.
     *
     * @param measurement to be deleted
     * @throws SDKException if the measurement could not be deleted
     */
    @Deprecated
    void deleteMeasurement(MeasurementRepresentation measurement) throws SDKException;

    void register(ProcessingMode processingMode);

    void unregister();
}
