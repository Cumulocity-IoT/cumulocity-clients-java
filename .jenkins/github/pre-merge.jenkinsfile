library "c8y-common-steps"
import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException

INSTANCES = ['java', 'sdk'].collectEntries { [(it): devInstanceOf(it)] }
SECRETS = [
    management: [ user: 'admin', pass: 'Pyi1bo1r' ],
    tenant: [ pass: 'Pyi1bo1r!' ]
]
VERSIONS = [
    changeList: "${env.CHANGE_ID}.${env.BUILD_NUMBER}.sdk" // Docker registry rejects versions with capital letters!
]

JOB_ABORTED = false
ERROR_COUNT = 0

AVAILABLE_BRANCHES = null

node('jdk11') {
  try {
    job_options()
    checkoutSdkAndCalculateItsVersion()
    calculateCoreAndAgentsVersions()
    parallel(
        'sdk pipeline': {
          withEnv([
              "VERSION=${VERSIONS.revision}",
              "CHANGE_VERSION=.${VERSIONS.changeList}",
              "MAVEN_ARGS=${env.MAVEN_ARGS} -Dcumulocity.core.version=${VERSIONS.coreRelease}"
          ]) {
            build_sdk()
          }
        },
        'spin up instances': {
          spinup_instances()
        },
        failFast: true
    )
    stage('update instances') {
      update_instances()
    }
    stage('functional tests') {
      functional_tests()
    }
  } catch (e) {
    if (e instanceof InterruptedException || e instanceof FlowInterruptedException) {
      JOB_ABORTED = true
      currentBuild.result = "ABORTED"
    } else {
      currentBuild.result = "FAILED"
    }
  } finally {
    //moved to finally block to ensure teardown happens if the pipeline is aborted
    stage('teardown') {
      teardown_instance(INSTANCES.java)
      teardown_instance(INSTANCES.sdk)
      clean_up_resources()
    }
  }
}

def job_options() {
  properties([[$class: 'JiraProjectProperty'],
              disableConcurrentBuilds(),
              parameters([string(defaultValue: '@smoke', description: 'to use multiple tags use @smoke or @security, to run full set use not (@ignore or @wip or @local)', name: 'java_test_tags')])])
}

def checkoutSdkAndCalculateItsVersion() {
  container('default') {
    stage('sdk checkout') {
      dir('cumulocity-clients-java') {
        try {
          checkout scm
        } catch (e) {
          stopPipeline('Checkout clients_java', e)
        }
      }
    }

    stage('sdk versions') {
      dir('cumulocity-clients-java') {
        try {
          VERSIONS.revision = sh(returnStdout: true,
              script: './mvnw -N -Dexec.executable=\'echo\' -Dexec.args=\'${revision}\' exec:exec -q'
          ).trim()
          VERSIONS.currentSdk = "${VERSIONS.revision}.${VERSIONS.changeList}"
          VERSIONS.currentSdkRpm = "${VERSIONS.currentSdk}-1"
          VERSIONS.release = getNearestBuildVersionFor(VERSIONS.revision)
          VERSIONS.releaseBranch = getNearestGAorLatestCurrentReleaseVersionFor(VERSIONS.revision)
          echo "Building SDK version ${VERSIONS.currentSdk} on top of release version ${VERSIONS.release}"
          setAvailableBranches(env.CHANGE_BRANCH, env.CHANGE_TARGET, VERSIONS.releaseBranch)
        } catch (e) {
          stopPipeline('Version sdk', e)
        }
      }
    }
  }
}

def retrieveComponentVersion(componentName) {
  withCredentials([file(credentialsId: 'maven-settings', variable: 'MVN_SETTINGS')]) {
    try {
      repoCheckout(componentName)

      dir(componentName) {
        componentRevision = sh(returnStdout: true,
                script: './mvnw -N -Dexec.executable=\'echo\' -Dexec.args=\'${revision}\' exec:exec -q'
        ).trim()
        versionToReturn = getNearestBuildVersionFor(componentRevision)
        echo "Current ${componentName} code version ${componentRevision}. Using the latest available build ${versionToReturn}"

        return versionToReturn
      }
    } catch (e) {
      stopPipeline("Retrieving ${componentName} version failed with and exception: ", e)
    }
  }
}

def calculateCoreAndAgentsVersions() {
  container('default') {
    parallel(
        'core version' : {
          VERSIONS.coreRelease = retrieveComponentVersion('cumulocity-core')
        },
        'agents version' : {
          VERSIONS.agentsVersion = retrieveComponentVersion('cumulocity-agents')
        }
    )
  }
}

def setAvailableBranches(changeBranch, changeTarget, releaseBranch) {
  AVAILABLE_BRANCHES = [ changeBranch, changeTarget, "release/r${releaseBranch}", "develop", "master" ]
}

def getAvailableBranches() {
  if (AVAILABLE_BRANCHES == null) {
    setAvailableBranches(env.CHANGE_BRANCH, env.CHANGE_TARGET, VERSIONS.releaseBranch)
  }

  return AVAILABLE_BRANCHES
}

def repoCheckout(repository) {
  echo "Checkout repository: ${repository}"
  String[] branches = getAvailableBranches()
  def exception = null

  for (int i = 0; i < branches.length; i++) {
    exception = null

    try {
      echo "Trying to checkout ${repository}'s branch ${branches[i]}"
      checkoutRepo(repository, branches[i])
      return
    } catch (e) {
      echo "Failed to checkout ${repository}'s branch ${branches[i]}. Reason: " + e.getMessage()
      exception = e
    }
  }

  throw exception
}

def build_sdk() {
  container('default') {
    withCredentials([file(credentialsId: 'maven-settings', variable: 'MVN_SETTINGS')]) {
      stage('checkout cumulocity-sdk') {
        dir('cumulocity-clients-java') {
          try {
            repoCheckout('cumulocity-sdk')
          } catch (e) {
            stopPipeline('Checkout SDK', e)
          }
        }
      }

      stage('sdk compile') {
        dir('cumulocity-clients-java') {
          try {
            sh '.jenkins/scripts/mvn.sh -DskipTests install'
          } catch (e) {
            stopPipeline('Compile SDK', e)
          }
        }
      }

      stage('sdk verify') {
        dir('cumulocity-clients-java') {
          try {
            sh '.jenkins/scripts/mvn.sh verify'
          } catch (e) {
            currentBuild.result = 'UNSTABLE'
            stageResult = "UNSTABLE"
          } finally {
            junit(allowEmptyResults: true, checksName: "cumulocity-clients-java-unit-test", keepLongStdio: true,
                    testResults: '**/TEST-*.xml')
          }
        }
      }
    }
  }
}

def spinup_instances() {
  stage('spin up dev-x instances') {
    parallel(
        'spin up java instance': {
          spinup_instance(INSTANCES.java)
        },
        'spin up sdk instance': {
          spinup_instance(INSTANCES.sdk)
        },
        failFast: true
    )
  }
}

def spinup_instance(instance) {
  if (!JOB_ABORTED && currentBuild.result != 'UNSTABLE' && currentBuild.result != 'FAILURE') {
    stage("deploy $instance.name env") {
      build job: 'dev-x-cc-deployment', parameters: [
          string(name: 'DEPLOY_ENVIRONMENT', value: instance.name),
          string(name: 'VERSION', value: VERSIONS.release),
          string(name: 'BUILD_TYPE', value: 'custom'),
          booleanParam(name: 'CONTAINERIZED_CORE', value: true),
          booleanParam(name: 'RUN_SMOKE_TESTS', value: false),
          booleanParam(name: 'RUN_JAVA_SDK_TESTS', value: false),
          booleanParam(name: 'RUN_CUCUMBER_JAVA_TESTS', value: false),
          booleanParam(name: 'RUN_CUCUMBER_RUBY_TESTS', value: false),
          booleanParam(name: 'RUN_PERFORMANCE_TESTS', value: false),
          booleanParam(name: 'RUN_READ_PERFORMANCE_TESTS', value: false),
          string(name: 'PURPOSE', value: 'clients-java-pre-merge-check')
      ],
          propagate: true
    }
  }
}

def update_instances() {
  node('smoke-provisioning') {
    container('c8y-tools') {
      repoCheckout('cumulocity-chef')
      dir('cumulocity-chef/smoke') {
        parallel(
            'update java instance': {
              update_instance(INSTANCES.java)
            },
            'update sdk instance': {
              update_instance(INSTANCES.sdk)
            },
            failFast: true
        )
      }
    }
  }
}

def update_instance(instance) {
  try {
    sh """#!/bin/bash
            set -eux

            chmod 600 ../.chef/keys/chef_cumulocity.pem

            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -v -T 300 -i ${instance.name}-internal.dev.c8y.io, \
              --user centos --private-key ../.chef/keys/chef_cumulocity.pem pre-merge-deploy.yaml \
              -e 'env_name=${instance.name}-dev-c8y-io' \
              -e 'microservices_version=${VERSIONS.currentSdk}' \
              -e 'pr_number=${VERSIONS.changeList}' \
              -e 'deploy_cep=false' \
              --skip-tags update-core,ssagents
          """
  } catch (e) {
    stopPipeline('Update instance', e)
  }
}

def functional_tests() {
  withEnv([
      "MAVEN_ARGS=--batch-mode --show-version --errors -Drevision=${VERSIONS.revision} -Dchangelist=.${VERSIONS.changeList} -Dcumulocity.core.version=${VERSIONS.coreRelease}"
  ]) {
    parallel(
        'java-tests': {
          cucumber_java(INSTANCES.java)
        },
        'java-token-tests': {
          sdk_token_tests(INSTANCES.sdk)
        },
        failFast: true
    )
  }
}

def cucumber_java(instance) {
  stage('cucumber-java') {
    licence = generateLicence("${instance.licence}")

    node('jdk11') {
      container('default') {
        withCredentials([
            file(credentialsId: 'maven-settings', variable: 'MVN_SETTINGS'),
            usernameColonPassword(credentialsId: 'resources-pre-merge', variable: 'RESOURCES_CREDENTIALS')
        ]) {
          withEnv([
              "BUILD_ARGS=${env.MAVEN_ARGS} -Dmaven.repo.local=${WORKSPACE}/.m2/repository",
              "RESOURCES_URL=https://${RESOURCES_CREDENTIALS}@staging-resources.cumulocity.com/pre-merge/${VERSIONS.changeList}"
          ]) {
            repoCheckout('cumulocity-quality')
            try {
              dir('cumulocity-quality') {
                sh """
                .jenkins/scripts/new_cucumber_java.sh ${instance.domain} \
                  ${SECRETS.management.pass} ${SECRETS.tenant.pass} "${params.java_test_tags}" \
                  ${instance.name}-dev-c8y-io.svc.cluster.local common ${licence} \
                  ${instance.licence} ${instance.name}-enterprise-second.dev.c8y.io \
                  ${SECRETS.management.user} "${RESOURCES_URL}" "${RESOURCES_URL}" "${RESOURCES_URL}"
                  """
              }
            } catch (Exception e) {
              currentBuild.result = "UNSTABLE"
              stageResult = "UNSTABLE"
              archiveArtifacts("cumulocity-quality/**/cucumber.log")
            } finally {
              publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: "cumulocity-quality/functional-tests/cucumber-java/target/cucumber", reportFiles: "index.html", reportName: "Cucumber Result"])
              junit(testResults: 'cumulocity-quality/**/TEST-*.xml', keepLongStdio: true, checksName: "cucumber-java-smoke")
              jacoco()
            }
          }
        }
      }
    }
  }
}

def sdk_token_tests(instance) {
  stage('sdk test') {
    sdk_tests(instance)
  }
  stage('token test') {
    java_token_tests(instance)
  }
}

def sdk_tests(instance) {
  node('jdk8') {
    container('default') {
      withCredentials([file(credentialsId: 'maven-settings', variable: 'MVN_SETTINGS')]) {
        withEnv([
            "BUILD_ARGS=${env.MAVEN_ARGS} -Dmaven.repo.local=${WORKSPACE}/.m2/repository"
        ]) {
          repoCheckout('cumulocity-clients-java')
          try {
            dir('cumulocity-clients-java') {
              sh ".jenkins/scripts/new_sdk_tests.sh ${instance.domain} ${SECRETS.management.pass} ${SECRETS.management.user}"
            }
          } catch (Exception e) {
            currentBuild.result = "UNSTABLE"
            stageResult = "UNSTABLE"
          } finally {
            junit "cumulocity-clients-java/**/target/surefire-reports/*.xml"
            junit "cumulocity-clients-java/**/target/failsafe-reports/*.xml"
            archiveArtifacts("cumulocity-clients-java/**/TEST-*.xml")
          }
        }
      }
    }
  }
}

def java_token_tests(instance) {
  licence = generateLicence("${instance.licence}")

  node('jdk11') {
    container('default') {
      withCredentials([
          file(credentialsId: 'maven-settings', variable: 'MVN_SETTINGS'),
          usernameColonPassword(credentialsId: 'resources-pre-merge', variable: 'RESOURCES_CREDENTIALS')
      ]) {
        withEnv([
            "BUILD_ARGS=${env.MAVEN_ARGS} -Dmaven.repo.local=${WORKSPACE}/.m2/repository",
            "RESOURCES_URL=https://${RESOURCES_CREDENTIALS}@staging-resources.cumulocity.com/pre-merge/${VERSIONS.changeList}"
        ]) {
          repoCheckout('cumulocity-quality')
          try {
            dir('cumulocity-quality') {
              sh """
            .jenkins/scripts/new_cucumber_token_java.sh ${instance.domain} \
              ${SECRETS.management.pass} ${SECRETS.tenant.pass} \
              ${instance.name}-dev-c8y-io.svc.cluster.local common \
              ${SECRETS.management.user} ${RESOURCES_URL} ${RESOURCES_URL} ${RESOURCES_URL}
              """
            }
          } catch (Exception e) {
            currentBuild.result = "UNSTABLE"
            stageResult = "UNSTABLE"
            archiveArtifacts("cumulocity-quality/**/cucumber.log")
          } finally {
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: "cumulocity-quality/functional-tests/cucumber-java/target/cucumber", reportFiles: "index.html", reportName: "Cucumber Java Token Result"])
            junit(testResults: 'cumulocity-quality/**/TEST-*.xml', keepLongStdio: true, checksName: "cucumber-java-token")
            jacoco()
            archiveArtifacts("cumulocity-quality/**/TEST-*.xml")
          }
        }
      }
    }
  }
}

def teardown_instance(instance) {
  build wait: false, job: "dev-x-termination", parameters: [string(name: 'DEPLOY_ENVIRONMENT', value: instance.name)]
}

def clean_up_resources() {
  sshagent(credentials: ['jenkins-master']) {
    sh "ssh -o 'StrictHostKeyChecking=no' hudson@staging-resources.cumulocity.com 'rm -rf /var/www/staging-resources/pre-merge/${VERSIONS.changeList}'"
  }
}

//Used to stop the pipeline for certain errors
//For example build errors
//Set overall and stage result to failure and use error to stop the pipeline executing except for the finally block
def stopPipeline(String msg, Exception e) {
  ERROR_COUNT++
  if (ERROR_COUNT == 1) {
    currentBuild.result = 'FAILURE'
    stageResult = "FAILURE"
    //stop the pipeline
    println "ERROR: ${msg} failed"
    manager.createSummary("warning.gif").appendText("<h1>ERROR: ${msg} failed</h1>", false, false, false, "red")
    error msg
  }
  throw e
}

// commons, possibly move to c8y-jenkins-common-steps ?
def devInstanceOf(String label, String tld = 'dev.c8y.io') {
  String instance_name = env.JOB_NAME
      .split("cumulocity-")[1]
      .replaceAll('[/_]', '-')
      .toLowerCase()

  return [
      label: label,
      name: "${instance_name}-${env.BUILD_NUMBER}-${label}".toString(),
      domain: "${instance_name}-${env.BUILD_NUMBER}-${label}.${tld}".toString(),
      licence: "${instance_name}-${env.BUILD_NUMBER}-${label}-enterprise.${tld}".toString(),
  ]
}

static def getNearestGAorLatestCurrentReleaseVersionFor(revision) {
  return getNearestBuildVersionFor(revision, true)
}

static def getNearestBuildVersionFor(revision, takeOfficialRelease = false) {
  String[] versions = revision.split('\\.')

  if (versions.length < 3) {
    return revision
  }

  int major = Integer.parseInt(versions[0])
  int minor = Integer.parseInt(versions[1])
  int maintenance = Integer.parseInt(versions[2])

  if (takeOfficialRelease && minor == 0) {
    return "${major}.${minor}.0".toString()
  }

  if (maintenance > 0) {
    return "${major}.${minor}.${maintenance - 1}".toString()
  }

  if (minor > 0) {
    return "${major}.${minor - 1}.${maintenance}".toString()
  }

  return revision
}
