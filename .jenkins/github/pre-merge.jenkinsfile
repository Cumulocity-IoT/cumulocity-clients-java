library "c8y-common-steps"
import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException

INSTANCES = ['java', 'sdk'].collectEntries { [(it): devInstanceOf(it)] }

VERSIONS = [
    changeList: "${env.CHANGE_ID}.${env.BUILD_NUMBER}.sdk" // Docker registry rejects versions with capital letters!
]
LOCKS = [
    build: "sdk-compile-${VERSIONS.changeList}",
    agents: "sdk-agents-${VERSIONS.changeList}",
    chef: "sdk-chef-${VERSIONS.changeList}"
]
JOB_ABORTED = false
ERROR_COUNT = 0

podTemplate(containers: [
    containerTemplate(
        name: 'default',
        image: 'registry.stage.c8y.io/ci/jdk:11',
        ttyEnabled: true,
        command: '/bin/sh -c',
        args: "cat",
        envVars: [
            envVar(key: 'JENKINS_URL', value: 'http://jenkins.ci.svc.cluster.local:8080/'),
            envVar(key: 'MAVEN_USER_HOME', value: '/home/jenkins/agent'),
            envVar(key: 'DOCKER_HOST', value: 'tcp://localhost:2375')
        ],
        resourceRequestCpu: '3',
        resourceRequestMemory: '8Gi',
        resourceLimitCpu: '4',
        resourceLimitMemory: '8Gi',
        workingDir: '/home/jenkins/agent'
    ),
    containerTemplate(
        name: 'dind-daemon',
        image: 'registry.stage.c8y.io/ci/docker:19.03-dind',
        command: 'dockerd-entrypoint.sh',
        args: '',
        envVars:[
            envVar(key: 'DOCKER_TLS_CERTDIR', value: '')
        ],
        privileged: true,
        runAsGroup: '0',
        runAsUser: '0',
        resourceRequestCpu: '1',
        resourceRequestMemory: '1024Mi',
        resourceLimitCpu: '2',
        resourceLimitMemory: '1024Mi'
    ),
    containerTemplate(
        name: 'c8y-tools',
        image: 'registry.stage.c8y.io/ci/c8y-smoke-provisioning:latest',
        command: '/bin/sh -c',
        args: 'cat',
        ttyEnabled: true,
        resourceRequestCpu: '1',
        resourceRequestMemory: '1024Mi',
        resourceLimitCpu: '2',
        resourceLimitMemory: '1024Mi',
    )
], imagePullSecrets: ['ci-registry-pull']) {

  node(POD_LABEL) {
    try {
      job_options()
      calculate_versions()
      parallel(
          'build and verify': {
            build_and_verify()
          },
          'agents verify': {
            agents_verify()
          },
          'examples verify': {
            examples_verify()
          },
          'java cucumber tests': {
            java_cucumber_tests()
          },
          'sdk cucumber tests': {
            sdk_cucumber_tests()
          },
          failFast: true
      )
    } catch (e) {
      if (e instanceof InterruptedException || e instanceof FlowInterruptedException) {
        JOB_ABORTED = true
        currentBuild.result = "ABORTED"
      } else {
        currentBuild.result = "FAILED"
      }
    } finally {
      //moved to finally block to ensure teardown happens if the pipeline is aborted
      stage('teardown') {
        teardown_instance(INSTANCES.java)
        teardown_instance(INSTANCES.sdk)
        clean_up_resources()
      }
    }
  }
}

def job_options() {
  properties([[$class: 'JiraProjectProperty'],
              disableConcurrentBuilds(),
              parameters([string(defaultValue: '@smoke', description: 'to use multiple tags use @smoke or @security, to run full set use not (@ignore or @wip or @local)', name: 'java_test_tags')])])
}

def calculate_versions() {
  container('default') {
    stage('sdk checkout') {
      dir('cumulocity-clients-java') {
        try {
          checkout scm
        } catch (e) {
          stopPipeline('Checkout clients_java', e)
        }

        try {
          checkoutMatchingBranch('cumulocity-sdk', env.CHANGE_BRANCH, env.CHANGE_TARGET)
        } catch (e) {
          stopPipeline('Checkout SDK', e)
        }
      }
    }

    stage('sdk versions') {
      withCredentials([file(credentialsId: 'maven-settings', variable: 'MVN_SETTINGS')]) {
        dir('cumulocity-clients-java') {
          try {
            VERSIONS.revision = sh(returnStdout: true,
                script: '.jenkins/scripts/mvn.sh -f . -N -Dexec.executable=\'echo\' -Dexec.args=\'${revision}\' exec:exec -q'
            ).trim()
            VERSIONS.current = "${VERSIONS.revision}.${VERSIONS.changeList}"
            VERSIONS.currentRpm = "${VERSIONS.current}-1"
            VERSIONS.release = releaseVersionOf(VERSIONS.revision)
            echo "Building SDK version ${VERSIONS.current} on top of release version ${VERSIONS.release}"
          } catch (e) {
            stopPipeline('Version sdk', e)
          }
        }
      }
    }
  }
}

def build_and_verify() {
  container('default') {
    withCredentials([file(credentialsId: 'maven-settings', variable: 'MVN_SETTINGS')]) {
      withEnv([
          "VERSION=${VERSIONS.revision}",
          "CHANGE_VERSION=.${VERSIONS.changeList}"
      ]) {
        lock(resource: LOCKS.build) {
          stage('sdk build') {
            dir('cumulocity-clients-java') {
              try {
                sh '.jenkins/scripts/mvn.sh -DskipTests install'
              } catch (e) {
                stopPipeline('Build sdk', e)
              }
            }
          }
        }

        stage('sdk verify') {
          dir('cumulocity-clients-java') {
            try {
              sh '.jenkins/scripts/mvn.sh verify'
            } catch (e) {
              unstable('SDK verification failed')
            } finally {
              junit(allowEmptyResults: true, checksName: "cumulocity-clients-java-unit-test", keepLongStdio: true,
                  testResults: '**/TEST-*.xml')
            }
          }
        }
      }
    }
  }
}

def agents_verify() {
  container('default') {
    withCredentials([file(credentialsId: 'maven-settings', variable: 'MVN_SETTINGS')]) {
      withEnv([
          "VERSION=${VERSIONS.revision}",
          "CHANGE_VERSION=.${VERSIONS.changeList}"
      ]) {
        lock(resource: LOCKS.agents) {
          stage('agents checkout') {
            try {
              checkoutMatchingBranch('cumulocity-agents', env.CHANGE_BRANCH, env.CHANGE_TARGET)
            } catch (e) {
              stopPipeline('Checkout agents', e)
            }
          }

          println 'Waiting for SDK to be compiled'
          lock(resource: LOCKS.build) {
            println 'SDK compiled. Let\'s proceed'
          }

          dir('cumulocity-agents') {
            stage('agents build') {
              try {
                sh ".jenkins/scripts/mvn.sh -DskipTests install -Dcumulocity.core.version=${VERSIONS.release}"
              } catch (e) {
                stopPipeline('Build agents', e)
              } finally {
                junit(allowEmptyResults: true, checksName: "cumulocity-agents-unit-tests", keepLongStdio: true, testResults: '**/TEST-*.xml')
              }
            }

            stage('agents publish') {
              try {
                sshagent(credentials: ['jenkins-master']) {
                  sh "ssh hudson@staging-resources.cumulocity.com 'mkdir -p /var/www/staging-resources/pre-merge/${VERSIONS.changeList}/yum'"
                  sh "ssh hudson@staging-resources.cumulocity.com 'mkdir -p /var/www/staging-resources/pre-merge/${VERSIONS.changeList}/kubernetes-images'"

                  sh "find . -iname '*.rpm' -exec scp {} hudson@staging-resources.cumulocity.com:/var/www/staging-resources/pre-merge/${VERSIONS.changeList}/yum/ \\;"
                  sh "find . -iname '*.zip' -exec scp {} hudson@staging-resources.cumulocity.com:/var/www/staging-resources/pre-merge/${VERSIONS.changeList}/kubernetes-images/ \\;"
                }
              } catch (e) {
                stopPipeline('Publish agents', e)
              }
            }
          }
        }

        dir('cumulocity-agents') {
          stage('agents verify') {
            try {
              sh ".jenkins/scripts/mvn.sh verify -Dcumulocity.core.version=${VERSIONS.release}"
            } catch (e) {
              unstable('Agents verification failed')
            } finally {
              junit(allowEmptyResults: true, checksName: "cumulocity-agents-unit-tests", keepLongStdio: true, testResults: '**/TEST-*.xml')
            }
          }
        }
      }
    }
  }
}

def examples_verify() {
  container('default') {
    withCredentials([file(credentialsId: 'maven-settings', variable: 'MVN_SETTINGS')]) {
      withEnv([
          "VERSION=${VERSIONS.revision}",
          "CHANGE_VERSION=.${VERSIONS.changeList}"
      ]) {
        stage('examples checkout') {
          try {
            checkoutMatchingBranch('cumulocity-examples', env.CHANGE_BRANCH, env.CHANGE_TARGET)
          } catch (e) {
            stopPipeline('Checkout examples', e)
          }
        }

        println "Waiting for SDK to be compiled"
        lock(resource: LOCKS.build) {
          println "SDK compiled. Let's proceed"
        }

        dir('cumulocity-examples') {
          stage('examples verify') {
            try {
              sh ".jenkins/scripts/mvn.sh install -Dskip.agent.package=true"
            } catch (e) {
              unstable('Examples verification failed')
            } finally {
              junit(allowEmptyResults: true, checksName: "cumulocity-agents-unit-tests", keepLongStdio: true, testResults: '**/TEST-*.xml')
            }
          }
        }
      }
    }
  }
}

def java_cucumber_tests() {
  spinup_instance(INSTANCES.java)
  update_instance(INSTANCES.java)
  cucumber_java(INSTANCES.java)
}

def sdk_cucumber_tests() {
  spinup_instance(INSTANCES.sdk)
  update_instance(INSTANCES.sdk)
  sdk_tests(INSTANCES.sdk)
  java_token_tests(INSTANCES.sdk)
}

def spinup_instance(instance) {
  stage("spin up ${instance.label} instance") {
    if (!JOB_ABORTED && currentBuild.result != 'UNSTABLE' && currentBuild.result != 'FAILURE') {
      build job: 'dev-x-cc-deployment', parameters: [
          string(name: 'DEPLOY_ENVIRONMENT', value: instance.name),
          string(name: 'VERSION', value: VERSIONS.release),
          string(name: 'BUILD_TYPE', value: 'custom'),
          string(name: 'LP_LIST', value: ''),
          booleanParam(name: 'DEPLOY_UI', value: false),
          booleanParam(name: 'CONTAINERIZED_CORE', value: true),
          booleanParam(name: 'RUN_SMOKE_TESTS', value: false),
          booleanParam(name: 'RUN_JAVA_SDK_TESTS', value: false),
          booleanParam(name: 'RUN_CUCUMBER_JAVA_TESTS', value: false),
          booleanParam(name: 'RUN_CUCUMBER_RUBY_TESTS', value: false),
          booleanParam(name: 'RUN_PERFORMANCE_TESTS', value: false),
          booleanParam(name: 'RUN_READ_PERFORMANCE_TESTS', value: false),
          string(name: 'PURPOSE', value: 'clients-java-pre-merge-check'),
          string(name: 'DEV_TEAM', value: 'C8Y Core'),
          string(name: 'PROJECT', value: 'C8Y Core')
      ],
          propagate: true
    }
  }
}

def update_instance(instance) {
  stage("update ${instance.label} instance") {
    container('c8y-tools') {
      lock(resource: LOCKS.chef) {
        if (!fileExists('cumulocity-chef')) {
          checkoutMatchingBranch('cumulocity-chef', env.CHANGE_BRANCH, "master")
        }
      }

      println "Waiting for agents to be compiled"
      lock(resource: LOCKS.agents) {
        println "Agents compiled. Let's proceed"
      }

      dir('cumulocity-chef/smoke') {
        try {
          sh """#!/bin/bash
            set -eux

            chmod 600 ../.chef/keys/chef_cumulocity.pem

            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -v -T 300 \
              -i ${instance.name}-internal.dev.c8y.io, \
              --user centos \
              --private-key ../.chef/keys/chef_cumulocity.pem \
              --skip-tags 'update-core,layeredproducts' \
              -e 'env_name=${instance.name}-dev-c8y-io' \
              -e 'agents_version=${VERSIONS.currentRpm}' \
              -e 'microservices_version=${VERSIONS.current}' \
              -e 'pr_number=${VERSIONS.changeList}' \
              pre-merge-deploy.yaml
          """
        } catch (e) {
          stopPipeline('Update instance', e)
        }
      }
    }
  }
}

def cucumber_java(instance) {
  stage('cucumber java tests') {
    container('default') {
      withCredentials([
          usernameColonPassword(credentialsId: 'staging-resources.cumulocity.com-k8screds', variable: 'RELEASE_RESOURCES_CREDENTIALS'),
          usernamePassword(credentialsId: 'pre-merge-management', usernameVariable: 'MANAGEMENT_USER', passwordVariable: 'MANAGEMENT_PASSWD'),
          string(credentialsId: 'pre-merge-tenant', variable: 'TENANT_PASSWD')
      ]) {
        withEnv([
            "RELEASE_RESOURCES_URL=https://${RELEASE_RESOURCES_CREDENTIALS}@staging-resources.cumulocity.com"
        ]) {
          job = build job: 'Functional/Multibranch-cumulocity_cucumber_java', parameters: [
              string(name: 'TEST_BRANCH', value: "${env.CHANGE_BRANCH},${env.CHANGE_TARGET}"),
              string(name: 'TEST_TAG', value: params.java_test_tags),
              string(name: 'KUB_NAMESPACE', value: "${instance.name}-dev-c8y-io.svc.cluster.local"),
              string(name: 'DEPLOYMENT_ENVIRONMENT', value: instance.domain),
              string(name: 'MANAGE_USER', value: MANAGEMENT_USER),
              string(name: 'MANAGE_PASS', value: MANAGEMENT_PASSWD),
              string(name: 'TENANT_PASS', value: TENANT_PASSWD),
              string(name: 'RESOURCES_COMMON_URL', value: RELEASE_RESOURCES_URL),
              string(name: 'RESOURCES_SAG_URL', value: RELEASE_RESOURCES_URL),
              string(name: 'RESOURCES_EXAMPLES_URL', value: RELEASE_RESOURCES_URL),
              string(name: 'BUILD_ARGS', value: "-Dc8y.clients.version=${VERSIONS.current} -Dresources.example.version=${VERSIONS.release} -Dresources.common.version=${VERSIONS.release} -Dresources.sag.version=${VERSIONS.release}"),
          ], wait: true, propagate: false

          if (job.result != 'SUCCESS') {
            unstable('Cucumber Java tests failed')
          }
          copyArtifacts(filter: '**/TEST-*.xml', fingerprintArtifacts: true, projectName: 'Functional/Multibranch-cumulocity_cucumber_java', selector: specific("${job.number}"), target: 'java', optional: true)
          junit(testResults: 'java/**/TEST-*.xml', keepLongStdio: true, allowEmptyResults: true)
        }
      }
    }
  }
}

def sdk_tests(instance) {
  stage('sdk java tests') {
    container('default') {
      withCredentials([
          usernamePassword(credentialsId: 'pre-merge-management', usernameVariable: 'MANAGEMENT_USER', passwordVariable: 'MANAGEMENT_PASSWD')
      ]) {
        job = build job: 'Functional/Multibranch_cumulocity_java_sdk', parameters: [
            string(name: 'DEPLOY_ENVIRONMENT', value: instance.domain),
            string(name: 'TEST_BRANCH', value: "${env.CHANGE_BRANCH},${env.CHANGE_TARGET}"),
            string(name: 'MANAGE_PASS', value: MANAGEMENT_PASSWD),
            string(name: 'BUILD_ARGS', value: "-Drevision=${VERSIONS.revision} -Dchangelist=.${VERSIONS.changeList}"),
        ], wait: true, propagate: false

        if (job.result != 'SUCCESS') {
          unstable('SDK functional tests failed')
        }
        copyArtifacts(filter: '**/TEST-*.xml', fingerprintArtifacts: true, projectName: 'Functional/Multibranch_cumulocity_java_sdk', selector: specific("${job.number}"), target: 'sdk', optional: true)
        junit(testResults: 'sdk/**/TEST-*.xml', keepLongStdio: true, allowEmptyResults: true)
      }
    }
  }
}

def java_token_tests(instance) {
  stage('java token tests') {
    container('default') {
      withCredentials([
          usernameColonPassword(credentialsId: 'staging-resources.cumulocity.com-k8screds', variable: 'RELEASE_RESOURCES_CREDENTIALS'),
          usernamePassword(credentialsId: 'pre-merge-management', usernameVariable: 'MANAGEMENT_USER', passwordVariable: 'MANAGEMENT_PASSWD'),
          string(credentialsId: 'pre-merge-tenant', variable: 'TENANT_PASSWD')
      ]) {
        withEnv([
            "RELEASE_RESOURCES_URL=https://${RELEASE_RESOURCES_CREDENTIALS}@staging-resources.cumulocity.com"
        ]) {
          job = build job: 'Functional/Multibranch_cumulocity_cucumber_token_java', parameters: [
              string(name: 'TEST_BRANCH', value: "${env.CHANGE_BRANCH},${env.CHANGE_TARGET}"),
              string(name: 'TEST_ENV', value: instance.domain),
              string(name: 'KUB_NAMESPACE', value: "${instance.name}-dev-c8y-io.svc.cluster.local"),
              string(name: 'TEST_TAG', value: '@passwordInternal'),
              string(name: 'MANAGE_PASS', value: MANAGEMENT_PASSWD),
              string(name: 'TENANT_PASS', value: TENANT_PASSWD),
              string(name: 'RESOURCES_COMMON_URL', value: RELEASE_RESOURCES_URL),
              string(name: 'RESOURCES_SAG_URL', value: RELEASE_RESOURCES_URL),
              string(name: 'RESOURCES_EXAMPLES_URL', value: RELEASE_RESOURCES_URL),
              string(name: 'BUILD_ARGS', value: "-Dc8y.clients.version=${VERSIONS.current} -Dresources.example.version=${VERSIONS.release} -Dresources.common.version=${VERSIONS.release} -Dresources.sag.version=${VERSIONS.release}"),
          ], wait: true, propagate: false

          if (job.result != 'SUCCESS') {
            unstable('SDK token tests failed')
          }
          copyArtifacts(filter: '**/TEST-*.xml', fingerprintArtifacts: true, projectName: 'Functional/Multibranch_cumulocity_cucumber_token_java', selector: specific("${job.number}"), target: 'token', optional: true)
          junit(testResults: 'token/**/TEST-*.xml', keepLongStdio: true, allowEmptyResults: true)
        }
      }
    }
  }
}

def teardown_instance(instance) {
  build wait: false, job: "dev-x-termination", parameters: [string(name: 'DEPLOY_ENVIRONMENT', value: instance.name)]
}

def clean_up_resources() {
  sshagent(credentials: ['jenkins-master']) {
    sh "ssh -o 'StrictHostKeyChecking=no' hudson@staging-resources.cumulocity.com 'rm -rf /var/www/staging-resources/pre-merge/${VERSIONS.changeList}'"
  }
}

//Used to stop the pipeline for certain errors
//For example build errors
//Set overall and stage result to failure and use error to stop the pipeline executing except for the finally block
def stopPipeline(String msg, Exception e) {
  ERROR_COUNT++
  if (ERROR_COUNT == 1) {
    currentBuild.result = 'FAILURE'
    stageResult = "FAILURE"
    //stop the pipeline
    println "ERROR: ${msg} failed"
    manager.createSummary("warning.gif").appendText("<h1>ERROR: ${msg} failed</h1>", false, false, false, "red")
    error msg
  }
  throw e
}

// commons, possibly move to c8y-jenkins-common-steps ?
def devInstanceOf(String label, String tld = 'dev.c8y.io') {
  String instance_name = env.JOB_NAME
      .split("cumulocity-")[1]
      .replaceAll('[/_]', '-')
      .toLowerCase()

  return [
      label: label,
      name: "${instance_name}-${env.BUILD_NUMBER}-${label}".toString(),
      domain: "${instance_name}-${env.BUILD_NUMBER}-${label}.${tld}".toString(),
      licence: "${instance_name}-${env.BUILD_NUMBER}-${label}-enterprise.${tld}".toString(),
  ]
}

def releaseVersionOf(String revision) {
  String[] versions = revision.split('\\.')
  if (versions.length < 3) {
    return revision
  }
  int major = Integer.parseInt(versions[0])
  int minor = Integer.parseInt(versions[1])
  int maintenance = Integer.parseInt(versions[2])
  if (maintenance > 0) {
    return "${major}.${minor}.${maintenance - 1}".toString()
  } else if (minor > 0) {
    return "${major}.${minor - 1}.${maintenance}".toString()
  } else {
    return revision
  }
}
