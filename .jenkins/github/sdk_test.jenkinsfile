node("jdk8")
{
    try
    {
        cleanWs()
        job_options()

        container("default")
        {
            stage('Checkout')
            {
                scm_checkout()
            }
            stage('Test')
            {
                run_sdk_tests()
            }
            stage('Publish results')
            {
                publish_results()
            }
        }
    }
    catch (Exception err)
    {
        println err
        currentBuild.result = "FAILURE"
    }
    finally
    {
        finish_job()
    }
}



//set the job options and parameters
def job_options()
{
    properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '')),
                copyArtifactPermission('/*/**'),
                parameters([string(defaultValue: 'develop', description: 'tests branch/revision', name: 'TEST_BRANCH'),
                            string(defaultValue: 'smoke1.dev.c8y.io', description: '', name: 'DEPLOY_ENVIRONMENT'),
                            string(defaultValue: '', description: 'management tenant password', name: 'MANAGE_PASS'),
                            string(defaultValue: '', description: 'maven build arguments', name: 'BUILD_ARGS'),
                            string(defaultValue: 'admin', description: 'management tenant username', name: 'MANAGE_USER')])])
}

def scm_checkout()
{

    try
    {
        checkout([
            $class: 'GitSCM',
            branches: [[name: "${params.TEST_BRANCH}"]],
            userRemoteConfigs: [[url: 'git@github.com:SoftwareAG/cumulocity-clients-java.git', credentialsId:'jenkins-master']]
        ])
        currentBuild.result = "SUCCESS"
    }
    catch (Exception err)
    {
        println err
        currentBuild.result = "FAILURE"
        error "Stopping pipeline checkout error"
    }
}

def run_sdk_tests()
{
    try
    {
        withCredentials([file(credentialsId: 'maven-settings', variable: 'MVN_SETTINGS')])
        {
            sh ".jenkins/scripts/new_sdk_tests.sh ${DEPLOY_ENVIRONMENT} '${MANAGE_PASS}' '${params.MANAGE_USER}'"
        }
        currentBuild.result = "SUCCESS"
    }
    catch (Exception err)
    {
        println err
        currentBuild.result = "FAILURE"
    }

}
// Publish the HTML report pass in the dir location, the name of the report file and the display name of the actual report
def publish_results()
{
    try
    {
        junit "**/target/surefire-reports/*.xml"
        junit "**/target/failsafe-reports/*.xml"
        archiveArtifacts("**/TEST-*.xml")
        currentBuild.result = "SUCCESS"
    }
    catch (Exception err)
    {
        println err
        currentBuild.result = "FAILURE"
    }
}

def finish_job()
{
    //check the trigger job do not want to notify if a PR test run fails, too much noise on the channel
    upstream = currentBuild.getBuildCauses('hudson.model.Cause$UpstreamCause')
    //Make string so we can use .contains
    String trigger = upstream.upstreamProject
    //If job fails and is not a PR then notify on channel
    if ((currentBuild.result != "SUCCESS") && !(trigger.contains("PR-")))
    {
        chat 'AAAAvnc5o90'
    }
    //Add badge to show test branch
    manager.addInfoBadge("Test branch is ${TEST_BRANCH}")
    cleanWs notFailBuild: true
}





